unit TestFireDACAdapter;

interface

uses
  Classes,
  FireDAC.Comp.Client,
  Spring,
  Spring.Persistence.Adapters.FireDAC,
  Spring.Persistence.Core.Base,
  Spring.Persistence.Core.Interfaces,
  Spring.Persistence.Core.Session,
  Spring.Persistence.Mapping.Attributes,
  Spring.Persistence.SQL.Generators.Ansi,
  Spring.Persistence.SQL.Params,
  SysUtils,
  TestEntities,
  TestFramework
  ;

type
  [Table('CUSTOMERS')]
  TFDCustomer = class
  private
    FId: Integer;
    FAge: Integer;
    FName: string;
    FHeight: Nullable<Double>;
  public
    [Column('ID', [cpPrimaryKey])] [AutoGenerated] property Id: Integer read FId write FId;
    [Column] property Age: Integer read FAge write FAge;
    [Column] property Name: string read FName write FName;
    [Column] property Height: Nullable<Double> read FHeight write FHeight;
  end;

  TFireDACSessionTest = class(TTestCase)
  private
    FConnection: IDBConnection;
    FSession: TSession;
    FDACConnection: TFDConnection;
  protected
    procedure CreateTables;
    function CreateCustomer(const name: string; const age: Integer): TFDCustomer;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure Save;
    procedure SaveNullable;
    procedure WhenSavingInTransaction_RollbackIsSuccessful;
    procedure WhenSavingInTransaction_CommitIsSuccessful;


  end;

implementation

uses
  Spring.Persistence.Core.ConnectionFactory,
  FireDAC.Phys.SQLite,
  Spring.Persistence.SQL.Interfaces,
  Spring.Collections,
  TestSession,
  Variants
  ;

{ TestFireDACSession }

function TFireDACSessionTest.CreateCustomer(const name: string;
  const age: Integer): TFDCustomer;
begin
  Result := TFDCustomer.Create;
  Result.Name := name;
  Result.Age := age;
end;

procedure TFireDACSessionTest.CreateTables;
begin
  FDACConnection.ExecSQL('CREATE TABLE IF NOT EXISTS CUSTOMERS ([ID] INTEGER PRIMARY KEY, [AGE] INTEGER NULL,'+
    '[NAME] NVARCHAR (255), [HEIGHT] FLOAT, [PICTURE] BLOB); ');
end;

procedure TFireDACSessionTest.Save;
var
  customer: TFDCustomer;
begin
  customer := CreateCustomer('Foo', 25);

  FSession.Save(customer);

  CheckEquals('Foo', FSession.FindAll<TFDCustomer>.First.Name);
  CheckFalse(FSession.FindAll<TFDCustomer>.First.Height.HasValue);
  customer.Free;
end;

procedure TFireDACSessionTest.SaveNullable;
var
  customer: TFDCustomer;
begin
  customer := CreateCustomer('Foo', 25);
  customer.Height := 1.1;
  FSession.Save(customer);

  CheckEquals(1.1, FSession.FindAll<TFDCustomer>.First.Height, 0.01);
  customer.Free;
end;

procedure TFireDACSessionTest.SetUp;
begin
  FDACConnection := TFDConnection.Create(nil);
  FDACConnection.DriverName := 'SQLite';
 // FDACConnection.Params.Add('Database=file::memory:?cache=shared');
 // FDACConnection.Params.Add('Database=:memory:');
//  inherited SetUp;
  FConnection := TConnectionFactory.GetInstance(dtFireDAC, FDACConnection);
  FConnection.QueryLanguage := qlSQLite;
  FConnection.AddExecutionListener(
    procedure(const command: string; const params: IEnumerable<TDBParam>)
    var
      i: Integer;
      param: TDBParam;
    begin
      Status(command);
      i := 0;
      for param in params do
      begin
        Status(Format('%2:d %0:s = %1:s. Type: %3:s',
          [param.Name,
          PrettyPrintVariant(param.ToVariant),
          i,
          VarTypeAsText(VarType(param.ToVariant))]));
        Inc(i);
      end;
      Status('-----');
    end);
  FSession := TSession.Create(FConnection);
  CreateTables;
end;

procedure TFireDACSessionTest.TearDown;
begin
  inherited TearDown;
  FDACConnection.Free;
  FSession.Free;
end;

procedure TFireDACSessionTest.WhenSavingInTransaction_CommitIsSuccessful;
var
  customer: TFDCustomer;
  transaction: IDBTransaction;
begin
  customer := CreateCustomer('Foo', 25);

  transaction := FSession.BeginTransaction;
  FSession.Save(customer);
  customer.Free;

  CheckEquals('Foo', FSession.FindAll<TFDCustomer>.First.Name);

  transaction.Commit;
  CheckEquals(1, FSession.FindAll<TFDCustomer>.Count);
  CheckEquals('Foo', FSession.FindAll<TFDCustomer>.First.Name);
end;

procedure TFireDACSessionTest.WhenSavingInTransaction_RollbackIsSuccessful;
var
  customer: TFDCustomer;
  transaction: IDBTransaction;
begin
  customer := CreateCustomer('Foo', 25);

  transaction := FSession.BeginTransaction;
  FSession.Save(customer);
  customer.Free;

  CheckEquals('Foo', FSession.FindAll<TFDCustomer>.First.Name);

  transaction.Rollback;
  CheckEquals(0, FSession.FindAll<TFDCustomer>.Count);
end;

initialization
  RegisterTest(TFireDACSessionTest.Suite);

end.
